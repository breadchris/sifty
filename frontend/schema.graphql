schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

input BookmarkQueryRequest {
  test: String!
}

type BookmarkQueryResponse {
  test: String!
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

input NewBookmark {
  url: String!
}

type SavedBookmark {
  id: ID!
  title: String!
  url: String!
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "bookmark"
"""
type bookmark {
  author: String!

  """An array relationship"""
  bookmark_tags(
    """distinct select on columns"""
    distinct_on: [bookmark_tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmark_tag_order_by!]

    """filter the rows returned"""
    where: bookmark_tag_bool_exp
  ): [bookmark_tag!]!

  """An aggregate relationship"""
  bookmark_tags_aggregate(
    """distinct select on columns"""
    distinct_on: [bookmark_tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmark_tag_order_by!]

    """filter the rows returned"""
    where: bookmark_tag_bool_exp
  ): bookmark_tag_aggregate!
  content: String!
  excerpt: String!
  html: String!
  id: uuid!
  modified: timestamp!
  public: Boolean!
  title: String!
  url: String!

  """An array relationship"""
  user_bookmarks(
    """distinct select on columns"""
    distinct_on: [user_bookmark_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_bookmark_order_by!]

    """filter the rows returned"""
    where: user_bookmark_bool_exp
  ): [user_bookmark!]!

  """An aggregate relationship"""
  user_bookmarks_aggregate(
    """distinct select on columns"""
    distinct_on: [user_bookmark_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_bookmark_order_by!]

    """filter the rows returned"""
    where: user_bookmark_bool_exp
  ): user_bookmark_aggregate!
}

"""
aggregated selection of "bookmark"
"""
type bookmark_aggregate {
  aggregate: bookmark_aggregate_fields
  nodes: [bookmark!]!
}

"""
aggregate fields of "bookmark"
"""
type bookmark_aggregate_fields {
  count(columns: [bookmark_select_column!], distinct: Boolean): Int!
  max: bookmark_max_fields
  min: bookmark_min_fields
}

"""
Boolean expression to filter rows from the table "bookmark". All fields are combined with a logical 'AND'.
"""
input bookmark_bool_exp {
  _and: [bookmark_bool_exp!]
  _not: bookmark_bool_exp
  _or: [bookmark_bool_exp!]
  author: String_comparison_exp
  bookmark_tags: bookmark_tag_bool_exp
  content: String_comparison_exp
  excerpt: String_comparison_exp
  html: String_comparison_exp
  id: uuid_comparison_exp
  modified: timestamp_comparison_exp
  public: Boolean_comparison_exp
  title: String_comparison_exp
  url: String_comparison_exp
  user_bookmarks: user_bookmark_bool_exp
}

"""
unique or primary key constraints on table "bookmark"
"""
enum bookmark_constraint {
  """unique or primary key constraint"""
  bookmark_pkey

  """unique or primary key constraint"""
  bookmark_url_unique
}

"""
input type for inserting data into table "bookmark"
"""
input bookmark_insert_input {
  author: String
  bookmark_tags: bookmark_tag_arr_rel_insert_input
  content: String
  excerpt: String
  html: String
  id: uuid
  modified: timestamp
  public: Boolean
  title: String
  url: String
  user_bookmarks: user_bookmark_arr_rel_insert_input
}

"""aggregate max on columns"""
type bookmark_max_fields {
  author: String
  content: String
  excerpt: String
  html: String
  id: uuid
  modified: timestamp
  title: String
  url: String
}

"""aggregate min on columns"""
type bookmark_min_fields {
  author: String
  content: String
  excerpt: String
  html: String
  id: uuid
  modified: timestamp
  title: String
  url: String
}

"""
response of any mutation on the table "bookmark"
"""
type bookmark_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [bookmark!]!
}

"""
input type for inserting object relation for remote table "bookmark"
"""
input bookmark_obj_rel_insert_input {
  data: bookmark_insert_input!

  """upsert condition"""
  on_conflict: bookmark_on_conflict
}

"""
on_conflict condition type for table "bookmark"
"""
input bookmark_on_conflict {
  constraint: bookmark_constraint!
  update_columns: [bookmark_update_column!]! = []
  where: bookmark_bool_exp
}

"""Ordering options when selecting data from "bookmark"."""
input bookmark_order_by {
  author: order_by
  bookmark_tags_aggregate: bookmark_tag_aggregate_order_by
  content: order_by
  excerpt: order_by
  html: order_by
  id: order_by
  modified: order_by
  public: order_by
  title: order_by
  url: order_by
  user_bookmarks_aggregate: user_bookmark_aggregate_order_by
}

"""primary key columns input for table: bookmark"""
input bookmark_pk_columns_input {
  id: uuid!
}

"""
select columns of table "bookmark"
"""
enum bookmark_select_column {
  """column name"""
  author

  """column name"""
  content

  """column name"""
  excerpt

  """column name"""
  html

  """column name"""
  id

  """column name"""
  modified

  """column name"""
  public

  """column name"""
  title

  """column name"""
  url
}

"""
input type for updating data in table "bookmark"
"""
input bookmark_set_input {
  author: String
  content: String
  excerpt: String
  html: String
  id: uuid
  modified: timestamp
  public: Boolean
  title: String
  url: String
}

"""
columns and relationships of "bookmark_tag"
"""
type bookmark_tag {
  bookmark_id: uuid!
  tag_id: uuid!
}

"""
aggregated selection of "bookmark_tag"
"""
type bookmark_tag_aggregate {
  aggregate: bookmark_tag_aggregate_fields
  nodes: [bookmark_tag!]!
}

"""
aggregate fields of "bookmark_tag"
"""
type bookmark_tag_aggregate_fields {
  count(columns: [bookmark_tag_select_column!], distinct: Boolean): Int!
  max: bookmark_tag_max_fields
  min: bookmark_tag_min_fields
}

"""
order by aggregate values of table "bookmark_tag"
"""
input bookmark_tag_aggregate_order_by {
  count: order_by
  max: bookmark_tag_max_order_by
  min: bookmark_tag_min_order_by
}

"""
input type for inserting array relation for remote table "bookmark_tag"
"""
input bookmark_tag_arr_rel_insert_input {
  data: [bookmark_tag_insert_input!]!

  """upsert condition"""
  on_conflict: bookmark_tag_on_conflict
}

"""
Boolean expression to filter rows from the table "bookmark_tag". All fields are combined with a logical 'AND'.
"""
input bookmark_tag_bool_exp {
  _and: [bookmark_tag_bool_exp!]
  _not: bookmark_tag_bool_exp
  _or: [bookmark_tag_bool_exp!]
  bookmark_id: uuid_comparison_exp
  tag_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "bookmark_tag"
"""
enum bookmark_tag_constraint {
  """unique or primary key constraint"""
  bookmark_tag_pkey
}

"""
input type for inserting data into table "bookmark_tag"
"""
input bookmark_tag_insert_input {
  bookmark_id: uuid
  tag_id: uuid
}

"""aggregate max on columns"""
type bookmark_tag_max_fields {
  bookmark_id: uuid
  tag_id: uuid
}

"""
order by max() on columns of table "bookmark_tag"
"""
input bookmark_tag_max_order_by {
  bookmark_id: order_by
  tag_id: order_by
}

"""aggregate min on columns"""
type bookmark_tag_min_fields {
  bookmark_id: uuid
  tag_id: uuid
}

"""
order by min() on columns of table "bookmark_tag"
"""
input bookmark_tag_min_order_by {
  bookmark_id: order_by
  tag_id: order_by
}

"""
response of any mutation on the table "bookmark_tag"
"""
type bookmark_tag_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [bookmark_tag!]!
}

"""
on_conflict condition type for table "bookmark_tag"
"""
input bookmark_tag_on_conflict {
  constraint: bookmark_tag_constraint!
  update_columns: [bookmark_tag_update_column!]! = []
  where: bookmark_tag_bool_exp
}

"""Ordering options when selecting data from "bookmark_tag"."""
input bookmark_tag_order_by {
  bookmark_id: order_by
  tag_id: order_by
}

"""primary key columns input for table: bookmark_tag"""
input bookmark_tag_pk_columns_input {
  bookmark_id: uuid!
  tag_id: uuid!
}

"""
select columns of table "bookmark_tag"
"""
enum bookmark_tag_select_column {
  """column name"""
  bookmark_id

  """column name"""
  tag_id
}

"""
input type for updating data in table "bookmark_tag"
"""
input bookmark_tag_set_input {
  bookmark_id: uuid
  tag_id: uuid
}

"""
update columns of table "bookmark_tag"
"""
enum bookmark_tag_update_column {
  """column name"""
  bookmark_id

  """column name"""
  tag_id
}

"""
update columns of table "bookmark"
"""
enum bookmark_update_column {
  """column name"""
  author

  """column name"""
  content

  """column name"""
  excerpt

  """column name"""
  html

  """column name"""
  id

  """column name"""
  modified

  """column name"""
  public

  """column name"""
  title

  """column name"""
  url
}

"""
columns and relationships of "identities"
"""
type identities {
  created_at: timestamp!
  id: uuid!
  nid: uuid
  schema_id: String!
  state: String!
  state_changed_at: timestamp
  traits(
    """JSON select path"""
    path: String
  ): jsonb!
  updated_at: timestamp!
}

"""
aggregated selection of "identities"
"""
type identities_aggregate {
  aggregate: identities_aggregate_fields
  nodes: [identities!]!
}

"""
aggregate fields of "identities"
"""
type identities_aggregate_fields {
  count(columns: [identities_select_column!], distinct: Boolean): Int!
  max: identities_max_fields
  min: identities_min_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input identities_append_input {
  traits: jsonb
}

"""
Boolean expression to filter rows from the table "identities". All fields are combined with a logical 'AND'.
"""
input identities_bool_exp {
  _and: [identities_bool_exp!]
  _not: identities_bool_exp
  _or: [identities_bool_exp!]
  created_at: timestamp_comparison_exp
  id: uuid_comparison_exp
  nid: uuid_comparison_exp
  schema_id: String_comparison_exp
  state: String_comparison_exp
  state_changed_at: timestamp_comparison_exp
  traits: jsonb_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "identities"
"""
enum identities_constraint {
  """unique or primary key constraint"""
  identities_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input identities_delete_at_path_input {
  traits: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input identities_delete_elem_input {
  traits: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input identities_delete_key_input {
  traits: String
}

"""
input type for inserting data into table "identities"
"""
input identities_insert_input {
  created_at: timestamp
  id: uuid
  nid: uuid
  schema_id: String
  state: String
  state_changed_at: timestamp
  traits: jsonb
  updated_at: timestamp
}

"""aggregate max on columns"""
type identities_max_fields {
  created_at: timestamp
  id: uuid
  nid: uuid
  schema_id: String
  state: String
  state_changed_at: timestamp
  updated_at: timestamp
}

"""aggregate min on columns"""
type identities_min_fields {
  created_at: timestamp
  id: uuid
  nid: uuid
  schema_id: String
  state: String
  state_changed_at: timestamp
  updated_at: timestamp
}

"""
response of any mutation on the table "identities"
"""
type identities_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [identities!]!
}

"""
input type for inserting object relation for remote table "identities"
"""
input identities_obj_rel_insert_input {
  data: identities_insert_input!

  """upsert condition"""
  on_conflict: identities_on_conflict
}

"""
on_conflict condition type for table "identities"
"""
input identities_on_conflict {
  constraint: identities_constraint!
  update_columns: [identities_update_column!]! = []
  where: identities_bool_exp
}

"""Ordering options when selecting data from "identities"."""
input identities_order_by {
  created_at: order_by
  id: order_by
  nid: order_by
  schema_id: order_by
  state: order_by
  state_changed_at: order_by
  traits: order_by
  updated_at: order_by
}

"""primary key columns input for table: identities"""
input identities_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input identities_prepend_input {
  traits: jsonb
}

"""
select columns of table "identities"
"""
enum identities_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  nid

  """column name"""
  schema_id

  """column name"""
  state

  """column name"""
  state_changed_at

  """column name"""
  traits

  """column name"""
  updated_at
}

"""
input type for updating data in table "identities"
"""
input identities_set_input {
  created_at: timestamp
  id: uuid
  nid: uuid
  schema_id: String
  state: String
  state_changed_at: timestamp
  traits: jsonb
  updated_at: timestamp
}

"""
update columns of table "identities"
"""
enum identities_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  nid

  """column name"""
  schema_id

  """column name"""
  state

  """column name"""
  state_changed_at

  """column name"""
  traits

  """column name"""
  updated_at
}

scalar jsonb

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "bookmark"
  """
  delete_bookmark(
    """filter the rows which have to be deleted"""
    where: bookmark_bool_exp!
  ): bookmark_mutation_response

  """
  delete single row from the table: "bookmark"
  """
  delete_bookmark_by_pk(id: uuid!): bookmark

  """
  delete data from the table: "bookmark_tag"
  """
  delete_bookmark_tag(
    """filter the rows which have to be deleted"""
    where: bookmark_tag_bool_exp!
  ): bookmark_tag_mutation_response

  """
  delete single row from the table: "bookmark_tag"
  """
  delete_bookmark_tag_by_pk(bookmark_id: uuid!, tag_id: uuid!): bookmark_tag

  """
  delete data from the table: "identities"
  """
  delete_identities(
    """filter the rows which have to be deleted"""
    where: identities_bool_exp!
  ): identities_mutation_response

  """
  delete single row from the table: "identities"
  """
  delete_identities_by_pk(id: uuid!): identities

  """
  delete data from the table: "pile"
  """
  delete_pile(
    """filter the rows which have to be deleted"""
    where: pile_bool_exp!
  ): pile_mutation_response

  """
  delete data from the table: "pile_bookmark"
  """
  delete_pile_bookmark(
    """filter the rows which have to be deleted"""
    where: pile_bookmark_bool_exp!
  ): pile_bookmark_mutation_response

  """
  delete single row from the table: "pile_bookmark"
  """
  delete_pile_bookmark_by_pk(id: uuid!): pile_bookmark

  """
  delete single row from the table: "pile"
  """
  delete_pile_by_pk(id: uuid!): pile

  """
  delete data from the table: "pile_consumer"
  """
  delete_pile_consumer(
    """filter the rows which have to be deleted"""
    where: pile_consumer_bool_exp!
  ): pile_consumer_mutation_response

  """
  delete single row from the table: "pile_consumer"
  """
  delete_pile_consumer_by_pk(id: uuid!): pile_consumer

  """
  delete data from the table: "pile_user"
  """
  delete_pile_user(
    """filter the rows which have to be deleted"""
    where: pile_user_bool_exp!
  ): pile_user_mutation_response

  """
  delete single row from the table: "pile_user"
  """
  delete_pile_user_by_pk(id: uuid!): pile_user

  """
  delete data from the table: "tag"
  """
  delete_tag(
    """filter the rows which have to be deleted"""
    where: tag_bool_exp!
  ): tag_mutation_response

  """
  delete single row from the table: "tag"
  """
  delete_tag_by_pk(id: uuid!): tag

  """
  delete data from the table: "user"
  """
  delete_user(
    """filter the rows which have to be deleted"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  delete data from the table: "user_bookmark"
  """
  delete_user_bookmark(
    """filter the rows which have to be deleted"""
    where: user_bookmark_bool_exp!
  ): user_bookmark_mutation_response

  """
  delete single row from the table: "user_bookmark"
  """
  delete_user_bookmark_by_pk(id: uuid!): user_bookmark

  """
  delete single row from the table: "user"
  """
  delete_user_by_pk(id: uuid!): user

  """
  insert data into the table: "bookmark"
  """
  insert_bookmark(
    """the rows to be inserted"""
    objects: [bookmark_insert_input!]!

    """upsert condition"""
    on_conflict: bookmark_on_conflict
  ): bookmark_mutation_response

  """
  insert a single row into the table: "bookmark"
  """
  insert_bookmark_one(
    """the row to be inserted"""
    object: bookmark_insert_input!

    """upsert condition"""
    on_conflict: bookmark_on_conflict
  ): bookmark

  """
  insert data into the table: "bookmark_tag"
  """
  insert_bookmark_tag(
    """the rows to be inserted"""
    objects: [bookmark_tag_insert_input!]!

    """upsert condition"""
    on_conflict: bookmark_tag_on_conflict
  ): bookmark_tag_mutation_response

  """
  insert a single row into the table: "bookmark_tag"
  """
  insert_bookmark_tag_one(
    """the row to be inserted"""
    object: bookmark_tag_insert_input!

    """upsert condition"""
    on_conflict: bookmark_tag_on_conflict
  ): bookmark_tag

  """
  insert data into the table: "identities"
  """
  insert_identities(
    """the rows to be inserted"""
    objects: [identities_insert_input!]!

    """upsert condition"""
    on_conflict: identities_on_conflict
  ): identities_mutation_response

  """
  insert a single row into the table: "identities"
  """
  insert_identities_one(
    """the row to be inserted"""
    object: identities_insert_input!

    """upsert condition"""
    on_conflict: identities_on_conflict
  ): identities

  """
  insert data into the table: "pile"
  """
  insert_pile(
    """the rows to be inserted"""
    objects: [pile_insert_input!]!

    """upsert condition"""
    on_conflict: pile_on_conflict
  ): pile_mutation_response

  """
  insert data into the table: "pile_bookmark"
  """
  insert_pile_bookmark(
    """the rows to be inserted"""
    objects: [pile_bookmark_insert_input!]!

    """upsert condition"""
    on_conflict: pile_bookmark_on_conflict
  ): pile_bookmark_mutation_response

  """
  insert a single row into the table: "pile_bookmark"
  """
  insert_pile_bookmark_one(
    """the row to be inserted"""
    object: pile_bookmark_insert_input!

    """upsert condition"""
    on_conflict: pile_bookmark_on_conflict
  ): pile_bookmark

  """
  insert data into the table: "pile_consumer"
  """
  insert_pile_consumer(
    """the rows to be inserted"""
    objects: [pile_consumer_insert_input!]!

    """upsert condition"""
    on_conflict: pile_consumer_on_conflict
  ): pile_consumer_mutation_response

  """
  insert a single row into the table: "pile_consumer"
  """
  insert_pile_consumer_one(
    """the row to be inserted"""
    object: pile_consumer_insert_input!

    """upsert condition"""
    on_conflict: pile_consumer_on_conflict
  ): pile_consumer

  """
  insert a single row into the table: "pile"
  """
  insert_pile_one(
    """the row to be inserted"""
    object: pile_insert_input!

    """upsert condition"""
    on_conflict: pile_on_conflict
  ): pile

  """
  insert data into the table: "pile_user"
  """
  insert_pile_user(
    """the rows to be inserted"""
    objects: [pile_user_insert_input!]!

    """upsert condition"""
    on_conflict: pile_user_on_conflict
  ): pile_user_mutation_response

  """
  insert a single row into the table: "pile_user"
  """
  insert_pile_user_one(
    """the row to be inserted"""
    object: pile_user_insert_input!

    """upsert condition"""
    on_conflict: pile_user_on_conflict
  ): pile_user

  """
  insert data into the table: "tag"
  """
  insert_tag(
    """the rows to be inserted"""
    objects: [tag_insert_input!]!

    """upsert condition"""
    on_conflict: tag_on_conflict
  ): tag_mutation_response

  """
  insert a single row into the table: "tag"
  """
  insert_tag_one(
    """the row to be inserted"""
    object: tag_insert_input!

    """upsert condition"""
    on_conflict: tag_on_conflict
  ): tag

  """
  insert data into the table: "user"
  """
  insert_user(
    """the rows to be inserted"""
    objects: [user_insert_input!]!

    """upsert condition"""
    on_conflict: user_on_conflict
  ): user_mutation_response

  """
  insert data into the table: "user_bookmark"
  """
  insert_user_bookmark(
    """the rows to be inserted"""
    objects: [user_bookmark_insert_input!]!

    """upsert condition"""
    on_conflict: user_bookmark_on_conflict
  ): user_bookmark_mutation_response

  """
  insert a single row into the table: "user_bookmark"
  """
  insert_user_bookmark_one(
    """the row to be inserted"""
    object: user_bookmark_insert_input!

    """upsert condition"""
    on_conflict: user_bookmark_on_conflict
  ): user_bookmark

  """
  insert a single row into the table: "user"
  """
  insert_user_one(
    """the row to be inserted"""
    object: user_insert_input!

    """upsert condition"""
    on_conflict: user_on_conflict
  ): user
  saveBookmark(input: NewBookmark!): SavedBookmark!

  """
  update data of the table: "bookmark"
  """
  update_bookmark(
    """sets the columns of the filtered rows to the given values"""
    _set: bookmark_set_input

    """filter the rows which have to be updated"""
    where: bookmark_bool_exp!
  ): bookmark_mutation_response

  """
  update single row of the table: "bookmark"
  """
  update_bookmark_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: bookmark_set_input
    pk_columns: bookmark_pk_columns_input!
  ): bookmark

  """
  update data of the table: "bookmark_tag"
  """
  update_bookmark_tag(
    """sets the columns of the filtered rows to the given values"""
    _set: bookmark_tag_set_input

    """filter the rows which have to be updated"""
    where: bookmark_tag_bool_exp!
  ): bookmark_tag_mutation_response

  """
  update single row of the table: "bookmark_tag"
  """
  update_bookmark_tag_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: bookmark_tag_set_input
    pk_columns: bookmark_tag_pk_columns_input!
  ): bookmark_tag

  """
  update data of the table: "identities"
  """
  update_identities(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: identities_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: identities_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: identities_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: identities_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: identities_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: identities_set_input

    """filter the rows which have to be updated"""
    where: identities_bool_exp!
  ): identities_mutation_response

  """
  update single row of the table: "identities"
  """
  update_identities_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: identities_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: identities_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: identities_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: identities_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: identities_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: identities_set_input
    pk_columns: identities_pk_columns_input!
  ): identities

  """
  update data of the table: "pile"
  """
  update_pile(
    """sets the columns of the filtered rows to the given values"""
    _set: pile_set_input

    """filter the rows which have to be updated"""
    where: pile_bool_exp!
  ): pile_mutation_response

  """
  update data of the table: "pile_bookmark"
  """
  update_pile_bookmark(
    """sets the columns of the filtered rows to the given values"""
    _set: pile_bookmark_set_input

    """filter the rows which have to be updated"""
    where: pile_bookmark_bool_exp!
  ): pile_bookmark_mutation_response

  """
  update single row of the table: "pile_bookmark"
  """
  update_pile_bookmark_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: pile_bookmark_set_input
    pk_columns: pile_bookmark_pk_columns_input!
  ): pile_bookmark

  """
  update single row of the table: "pile"
  """
  update_pile_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: pile_set_input
    pk_columns: pile_pk_columns_input!
  ): pile

  """
  update data of the table: "pile_consumer"
  """
  update_pile_consumer(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: pile_consumer_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: pile_consumer_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: pile_consumer_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: pile_consumer_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: pile_consumer_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: pile_consumer_set_input

    """filter the rows which have to be updated"""
    where: pile_consumer_bool_exp!
  ): pile_consumer_mutation_response

  """
  update single row of the table: "pile_consumer"
  """
  update_pile_consumer_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: pile_consumer_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: pile_consumer_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: pile_consumer_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: pile_consumer_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: pile_consumer_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: pile_consumer_set_input
    pk_columns: pile_consumer_pk_columns_input!
  ): pile_consumer

  """
  update data of the table: "pile_user"
  """
  update_pile_user(
    """sets the columns of the filtered rows to the given values"""
    _set: pile_user_set_input

    """filter the rows which have to be updated"""
    where: pile_user_bool_exp!
  ): pile_user_mutation_response

  """
  update single row of the table: "pile_user"
  """
  update_pile_user_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: pile_user_set_input
    pk_columns: pile_user_pk_columns_input!
  ): pile_user

  """
  update data of the table: "tag"
  """
  update_tag(
    """sets the columns of the filtered rows to the given values"""
    _set: tag_set_input

    """filter the rows which have to be updated"""
    where: tag_bool_exp!
  ): tag_mutation_response

  """
  update single row of the table: "tag"
  """
  update_tag_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: tag_set_input
    pk_columns: tag_pk_columns_input!
  ): tag

  """
  update data of the table: "user"
  """
  update_user(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input

    """filter the rows which have to be updated"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  update data of the table: "user_bookmark"
  """
  update_user_bookmark(
    """sets the columns of the filtered rows to the given values"""
    _set: user_bookmark_set_input

    """filter the rows which have to be updated"""
    where: user_bookmark_bool_exp!
  ): user_bookmark_mutation_response

  """
  update single row of the table: "user_bookmark"
  """
  update_user_bookmark_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_bookmark_set_input
    pk_columns: user_bookmark_pk_columns_input!
  ): user_bookmark

  """
  update single row of the table: "user"
  """
  update_user_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input
    pk_columns: user_pk_columns_input!
  ): user
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""An unorganized pile of bookmarks that have been collected."""
type pile {
  id: uuid!
  name: String!

  """An array relationship"""
  pile_bookmarks(
    """distinct select on columns"""
    distinct_on: [pile_bookmark_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pile_bookmark_order_by!]

    """filter the rows returned"""
    where: pile_bookmark_bool_exp
  ): [pile_bookmark!]!

  """An aggregate relationship"""
  pile_bookmarks_aggregate(
    """distinct select on columns"""
    distinct_on: [pile_bookmark_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pile_bookmark_order_by!]

    """filter the rows returned"""
    where: pile_bookmark_bool_exp
  ): pile_bookmark_aggregate!

  """An array relationship"""
  pile_consumers(
    """distinct select on columns"""
    distinct_on: [pile_consumer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pile_consumer_order_by!]

    """filter the rows returned"""
    where: pile_consumer_bool_exp
  ): [pile_consumer!]!

  """An aggregate relationship"""
  pile_consumers_aggregate(
    """distinct select on columns"""
    distinct_on: [pile_consumer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pile_consumer_order_by!]

    """filter the rows returned"""
    where: pile_consumer_bool_exp
  ): pile_consumer_aggregate!

  """An array relationship"""
  pile_users(
    """distinct select on columns"""
    distinct_on: [pile_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pile_user_order_by!]

    """filter the rows returned"""
    where: pile_user_bool_exp
  ): [pile_user!]!

  """An aggregate relationship"""
  pile_users_aggregate(
    """distinct select on columns"""
    distinct_on: [pile_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pile_user_order_by!]

    """filter the rows returned"""
    where: pile_user_bool_exp
  ): pile_user_aggregate!
}

"""
aggregated selection of "pile"
"""
type pile_aggregate {
  aggregate: pile_aggregate_fields
  nodes: [pile!]!
}

"""
aggregate fields of "pile"
"""
type pile_aggregate_fields {
  count(columns: [pile_select_column!], distinct: Boolean): Int!
  max: pile_max_fields
  min: pile_min_fields
}

"""A bookmark for a pile."""
type pile_bookmark {
  """An object relationship"""
  bookmark: bookmark!
  bookmark_id: uuid!

  """An object relationship"""
  contributor: user
  created_at: timestamptz
  id: uuid!

  """An object relationship"""
  pile: pile!
  pile_id: uuid!
  user_id: uuid
}

"""
aggregated selection of "pile_bookmark"
"""
type pile_bookmark_aggregate {
  aggregate: pile_bookmark_aggregate_fields
  nodes: [pile_bookmark!]!
}

"""
aggregate fields of "pile_bookmark"
"""
type pile_bookmark_aggregate_fields {
  count(columns: [pile_bookmark_select_column!], distinct: Boolean): Int!
  max: pile_bookmark_max_fields
  min: pile_bookmark_min_fields
}

"""
order by aggregate values of table "pile_bookmark"
"""
input pile_bookmark_aggregate_order_by {
  count: order_by
  max: pile_bookmark_max_order_by
  min: pile_bookmark_min_order_by
}

"""
input type for inserting array relation for remote table "pile_bookmark"
"""
input pile_bookmark_arr_rel_insert_input {
  data: [pile_bookmark_insert_input!]!

  """upsert condition"""
  on_conflict: pile_bookmark_on_conflict
}

"""
Boolean expression to filter rows from the table "pile_bookmark". All fields are combined with a logical 'AND'.
"""
input pile_bookmark_bool_exp {
  _and: [pile_bookmark_bool_exp!]
  _not: pile_bookmark_bool_exp
  _or: [pile_bookmark_bool_exp!]
  bookmark: bookmark_bool_exp
  bookmark_id: uuid_comparison_exp
  contributor: user_bool_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  pile: pile_bool_exp
  pile_id: uuid_comparison_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "pile_bookmark"
"""
enum pile_bookmark_constraint {
  """unique or primary key constraint"""
  pile_bookmark_pkey
}

"""
input type for inserting data into table "pile_bookmark"
"""
input pile_bookmark_insert_input {
  bookmark: bookmark_obj_rel_insert_input
  bookmark_id: uuid
  contributor: user_obj_rel_insert_input
  created_at: timestamptz
  id: uuid
  pile: pile_obj_rel_insert_input
  pile_id: uuid
  user_id: uuid
}

"""aggregate max on columns"""
type pile_bookmark_max_fields {
  bookmark_id: uuid
  created_at: timestamptz
  id: uuid
  pile_id: uuid
  user_id: uuid
}

"""
order by max() on columns of table "pile_bookmark"
"""
input pile_bookmark_max_order_by {
  bookmark_id: order_by
  created_at: order_by
  id: order_by
  pile_id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type pile_bookmark_min_fields {
  bookmark_id: uuid
  created_at: timestamptz
  id: uuid
  pile_id: uuid
  user_id: uuid
}

"""
order by min() on columns of table "pile_bookmark"
"""
input pile_bookmark_min_order_by {
  bookmark_id: order_by
  created_at: order_by
  id: order_by
  pile_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "pile_bookmark"
"""
type pile_bookmark_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [pile_bookmark!]!
}

"""
on_conflict condition type for table "pile_bookmark"
"""
input pile_bookmark_on_conflict {
  constraint: pile_bookmark_constraint!
  update_columns: [pile_bookmark_update_column!]! = []
  where: pile_bookmark_bool_exp
}

"""Ordering options when selecting data from "pile_bookmark"."""
input pile_bookmark_order_by {
  bookmark: bookmark_order_by
  bookmark_id: order_by
  contributor: user_order_by
  created_at: order_by
  id: order_by
  pile: pile_order_by
  pile_id: order_by
  user_id: order_by
}

"""primary key columns input for table: pile_bookmark"""
input pile_bookmark_pk_columns_input {
  id: uuid!
}

"""
select columns of table "pile_bookmark"
"""
enum pile_bookmark_select_column {
  """column name"""
  bookmark_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  pile_id

  """column name"""
  user_id
}

"""
input type for updating data in table "pile_bookmark"
"""
input pile_bookmark_set_input {
  bookmark_id: uuid
  created_at: timestamptz
  id: uuid
  pile_id: uuid
  user_id: uuid
}

"""
update columns of table "pile_bookmark"
"""
enum pile_bookmark_update_column {
  """column name"""
  bookmark_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  pile_id

  """column name"""
  user_id
}

"""
Boolean expression to filter rows from the table "pile". All fields are combined with a logical 'AND'.
"""
input pile_bool_exp {
  _and: [pile_bool_exp!]
  _not: pile_bool_exp
  _or: [pile_bool_exp!]
  id: uuid_comparison_exp
  name: String_comparison_exp
  pile_bookmarks: pile_bookmark_bool_exp
  pile_consumers: pile_consumer_bool_exp
  pile_users: pile_user_bool_exp
}

"""
unique or primary key constraints on table "pile"
"""
enum pile_constraint {
  """unique or primary key constraint"""
  bookmark_pile_pkey
}

"""A consumer for bookmarks that are added to a pile."""
type pile_consumer {
  config(
    """JSON select path"""
    path: String
  ): jsonb!
  id: uuid!

  """An object relationship"""
  pile: pile!
  pile_id: uuid!
  type: pile_consumer_type
}

"""
aggregated selection of "pile_consumer"
"""
type pile_consumer_aggregate {
  aggregate: pile_consumer_aggregate_fields
  nodes: [pile_consumer!]!
}

"""
aggregate fields of "pile_consumer"
"""
type pile_consumer_aggregate_fields {
  count(columns: [pile_consumer_select_column!], distinct: Boolean): Int!
  max: pile_consumer_max_fields
  min: pile_consumer_min_fields
}

"""
order by aggregate values of table "pile_consumer"
"""
input pile_consumer_aggregate_order_by {
  count: order_by
  max: pile_consumer_max_order_by
  min: pile_consumer_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input pile_consumer_append_input {
  config: jsonb
}

"""
input type for inserting array relation for remote table "pile_consumer"
"""
input pile_consumer_arr_rel_insert_input {
  data: [pile_consumer_insert_input!]!

  """upsert condition"""
  on_conflict: pile_consumer_on_conflict
}

"""
Boolean expression to filter rows from the table "pile_consumer". All fields are combined with a logical 'AND'.
"""
input pile_consumer_bool_exp {
  _and: [pile_consumer_bool_exp!]
  _not: pile_consumer_bool_exp
  _or: [pile_consumer_bool_exp!]
  config: jsonb_comparison_exp
  id: uuid_comparison_exp
  pile: pile_bool_exp
  pile_id: uuid_comparison_exp
  type: pile_consumer_type_comparison_exp
}

"""
unique or primary key constraints on table "pile_consumer"
"""
enum pile_consumer_constraint {
  """unique or primary key constraint"""
  pile_consumer_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input pile_consumer_delete_at_path_input {
  config: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input pile_consumer_delete_elem_input {
  config: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input pile_consumer_delete_key_input {
  config: String
}

"""
input type for inserting data into table "pile_consumer"
"""
input pile_consumer_insert_input {
  config: jsonb
  id: uuid
  pile: pile_obj_rel_insert_input
  pile_id: uuid
  type: pile_consumer_type
}

"""aggregate max on columns"""
type pile_consumer_max_fields {
  id: uuid
  pile_id: uuid
}

"""
order by max() on columns of table "pile_consumer"
"""
input pile_consumer_max_order_by {
  id: order_by
  pile_id: order_by
}

"""aggregate min on columns"""
type pile_consumer_min_fields {
  id: uuid
  pile_id: uuid
}

"""
order by min() on columns of table "pile_consumer"
"""
input pile_consumer_min_order_by {
  id: order_by
  pile_id: order_by
}

"""
response of any mutation on the table "pile_consumer"
"""
type pile_consumer_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [pile_consumer!]!
}

"""
on_conflict condition type for table "pile_consumer"
"""
input pile_consumer_on_conflict {
  constraint: pile_consumer_constraint!
  update_columns: [pile_consumer_update_column!]! = []
  where: pile_consumer_bool_exp
}

"""Ordering options when selecting data from "pile_consumer"."""
input pile_consumer_order_by {
  config: order_by
  id: order_by
  pile: pile_order_by
  pile_id: order_by
  type: order_by
}

"""primary key columns input for table: pile_consumer"""
input pile_consumer_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input pile_consumer_prepend_input {
  config: jsonb
}

"""
select columns of table "pile_consumer"
"""
enum pile_consumer_select_column {
  """column name"""
  config

  """column name"""
  id

  """column name"""
  pile_id

  """column name"""
  type
}

"""
input type for updating data in table "pile_consumer"
"""
input pile_consumer_set_input {
  config: jsonb
  id: uuid
  pile_id: uuid
  type: pile_consumer_type
}

scalar pile_consumer_type

"""
Boolean expression to compare columns of type "pile_consumer_type". All fields are combined with logical 'AND'.
"""
input pile_consumer_type_comparison_exp {
  _eq: pile_consumer_type
  _gt: pile_consumer_type
  _gte: pile_consumer_type
  _in: [pile_consumer_type!]
  _is_null: Boolean
  _lt: pile_consumer_type
  _lte: pile_consumer_type
  _neq: pile_consumer_type
  _nin: [pile_consumer_type!]
}

"""
update columns of table "pile_consumer"
"""
enum pile_consumer_update_column {
  """column name"""
  config

  """column name"""
  id

  """column name"""
  pile_id

  """column name"""
  type
}

"""
input type for inserting data into table "pile"
"""
input pile_insert_input {
  id: uuid
  name: String
  pile_bookmarks: pile_bookmark_arr_rel_insert_input
  pile_consumers: pile_consumer_arr_rel_insert_input
  pile_users: pile_user_arr_rel_insert_input
}

"""aggregate max on columns"""
type pile_max_fields {
  id: uuid
  name: String
}

"""aggregate min on columns"""
type pile_min_fields {
  id: uuid
  name: String
}

"""
response of any mutation on the table "pile"
"""
type pile_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [pile!]!
}

"""
input type for inserting object relation for remote table "pile"
"""
input pile_obj_rel_insert_input {
  data: pile_insert_input!

  """upsert condition"""
  on_conflict: pile_on_conflict
}

"""
on_conflict condition type for table "pile"
"""
input pile_on_conflict {
  constraint: pile_constraint!
  update_columns: [pile_update_column!]! = []
  where: pile_bool_exp
}

"""Ordering options when selecting data from "pile"."""
input pile_order_by {
  id: order_by
  name: order_by
  pile_bookmarks_aggregate: pile_bookmark_aggregate_order_by
  pile_consumers_aggregate: pile_consumer_aggregate_order_by
  pile_users_aggregate: pile_user_aggregate_order_by
}

"""primary key columns input for table: pile"""
input pile_pk_columns_input {
  id: uuid!
}

"""
select columns of table "pile"
"""
enum pile_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "pile"
"""
input pile_set_input {
  id: uuid
  name: String
}

"""
update columns of table "pile"
"""
enum pile_update_column {
  """column name"""
  id

  """column name"""
  name
}

"""User association to a pile."""
type pile_user {
  id: uuid!
  pile_id: uuid!
  user_id: uuid!
}

"""
aggregated selection of "pile_user"
"""
type pile_user_aggregate {
  aggregate: pile_user_aggregate_fields
  nodes: [pile_user!]!
}

"""
aggregate fields of "pile_user"
"""
type pile_user_aggregate_fields {
  count(columns: [pile_user_select_column!], distinct: Boolean): Int!
  max: pile_user_max_fields
  min: pile_user_min_fields
}

"""
order by aggregate values of table "pile_user"
"""
input pile_user_aggregate_order_by {
  count: order_by
  max: pile_user_max_order_by
  min: pile_user_min_order_by
}

"""
input type for inserting array relation for remote table "pile_user"
"""
input pile_user_arr_rel_insert_input {
  data: [pile_user_insert_input!]!

  """upsert condition"""
  on_conflict: pile_user_on_conflict
}

"""
Boolean expression to filter rows from the table "pile_user". All fields are combined with a logical 'AND'.
"""
input pile_user_bool_exp {
  _and: [pile_user_bool_exp!]
  _not: pile_user_bool_exp
  _or: [pile_user_bool_exp!]
  id: uuid_comparison_exp
  pile_id: uuid_comparison_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "pile_user"
"""
enum pile_user_constraint {
  """unique or primary key constraint"""
  pile_user_pkey
}

"""
input type for inserting data into table "pile_user"
"""
input pile_user_insert_input {
  id: uuid
  pile_id: uuid
  user_id: uuid
}

"""aggregate max on columns"""
type pile_user_max_fields {
  id: uuid
  pile_id: uuid
  user_id: uuid
}

"""
order by max() on columns of table "pile_user"
"""
input pile_user_max_order_by {
  id: order_by
  pile_id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type pile_user_min_fields {
  id: uuid
  pile_id: uuid
  user_id: uuid
}

"""
order by min() on columns of table "pile_user"
"""
input pile_user_min_order_by {
  id: order_by
  pile_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "pile_user"
"""
type pile_user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [pile_user!]!
}

"""
on_conflict condition type for table "pile_user"
"""
input pile_user_on_conflict {
  constraint: pile_user_constraint!
  update_columns: [pile_user_update_column!]! = []
  where: pile_user_bool_exp
}

"""Ordering options when selecting data from "pile_user"."""
input pile_user_order_by {
  id: order_by
  pile_id: order_by
  user_id: order_by
}

"""primary key columns input for table: pile_user"""
input pile_user_pk_columns_input {
  id: uuid!
}

"""
select columns of table "pile_user"
"""
enum pile_user_select_column {
  """column name"""
  id

  """column name"""
  pile_id

  """column name"""
  user_id
}

"""
input type for updating data in table "pile_user"
"""
input pile_user_set_input {
  id: uuid
  pile_id: uuid
  user_id: uuid
}

"""
update columns of table "pile_user"
"""
enum pile_user_update_column {
  """column name"""
  id

  """column name"""
  pile_id

  """column name"""
  user_id
}

type query_root {
  """
  fetch data from the table: "bookmark"
  """
  bookmark(
    """distinct select on columns"""
    distinct_on: [bookmark_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmark_order_by!]

    """filter the rows returned"""
    where: bookmark_bool_exp
  ): [bookmark!]!
  bookmarkQuery(q: BookmarkQueryRequest): BookmarkQueryResponse!

  """
  fetch aggregated fields from the table: "bookmark"
  """
  bookmark_aggregate(
    """distinct select on columns"""
    distinct_on: [bookmark_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmark_order_by!]

    """filter the rows returned"""
    where: bookmark_bool_exp
  ): bookmark_aggregate!

  """fetch data from the table: "bookmark" using primary key columns"""
  bookmark_by_pk(id: uuid!): bookmark

  """
  fetch data from the table: "bookmark_tag"
  """
  bookmark_tag(
    """distinct select on columns"""
    distinct_on: [bookmark_tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmark_tag_order_by!]

    """filter the rows returned"""
    where: bookmark_tag_bool_exp
  ): [bookmark_tag!]!

  """
  fetch aggregated fields from the table: "bookmark_tag"
  """
  bookmark_tag_aggregate(
    """distinct select on columns"""
    distinct_on: [bookmark_tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmark_tag_order_by!]

    """filter the rows returned"""
    where: bookmark_tag_bool_exp
  ): bookmark_tag_aggregate!

  """fetch data from the table: "bookmark_tag" using primary key columns"""
  bookmark_tag_by_pk(bookmark_id: uuid!, tag_id: uuid!): bookmark_tag

  """
  fetch data from the table: "identities"
  """
  identities(
    """distinct select on columns"""
    distinct_on: [identities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identities_order_by!]

    """filter the rows returned"""
    where: identities_bool_exp
  ): [identities!]!

  """
  fetch aggregated fields from the table: "identities"
  """
  identities_aggregate(
    """distinct select on columns"""
    distinct_on: [identities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identities_order_by!]

    """filter the rows returned"""
    where: identities_bool_exp
  ): identities_aggregate!

  """fetch data from the table: "identities" using primary key columns"""
  identities_by_pk(id: uuid!): identities

  """
  fetch data from the table: "pile"
  """
  pile(
    """distinct select on columns"""
    distinct_on: [pile_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pile_order_by!]

    """filter the rows returned"""
    where: pile_bool_exp
  ): [pile!]!

  """
  fetch aggregated fields from the table: "pile"
  """
  pile_aggregate(
    """distinct select on columns"""
    distinct_on: [pile_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pile_order_by!]

    """filter the rows returned"""
    where: pile_bool_exp
  ): pile_aggregate!

  """
  fetch data from the table: "pile_bookmark"
  """
  pile_bookmark(
    """distinct select on columns"""
    distinct_on: [pile_bookmark_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pile_bookmark_order_by!]

    """filter the rows returned"""
    where: pile_bookmark_bool_exp
  ): [pile_bookmark!]!

  """
  fetch aggregated fields from the table: "pile_bookmark"
  """
  pile_bookmark_aggregate(
    """distinct select on columns"""
    distinct_on: [pile_bookmark_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pile_bookmark_order_by!]

    """filter the rows returned"""
    where: pile_bookmark_bool_exp
  ): pile_bookmark_aggregate!

  """fetch data from the table: "pile_bookmark" using primary key columns"""
  pile_bookmark_by_pk(id: uuid!): pile_bookmark

  """fetch data from the table: "pile" using primary key columns"""
  pile_by_pk(id: uuid!): pile

  """
  fetch data from the table: "pile_consumer"
  """
  pile_consumer(
    """distinct select on columns"""
    distinct_on: [pile_consumer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pile_consumer_order_by!]

    """filter the rows returned"""
    where: pile_consumer_bool_exp
  ): [pile_consumer!]!

  """
  fetch aggregated fields from the table: "pile_consumer"
  """
  pile_consumer_aggregate(
    """distinct select on columns"""
    distinct_on: [pile_consumer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pile_consumer_order_by!]

    """filter the rows returned"""
    where: pile_consumer_bool_exp
  ): pile_consumer_aggregate!

  """fetch data from the table: "pile_consumer" using primary key columns"""
  pile_consumer_by_pk(id: uuid!): pile_consumer

  """
  fetch data from the table: "pile_user"
  """
  pile_user(
    """distinct select on columns"""
    distinct_on: [pile_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pile_user_order_by!]

    """filter the rows returned"""
    where: pile_user_bool_exp
  ): [pile_user!]!

  """
  fetch aggregated fields from the table: "pile_user"
  """
  pile_user_aggregate(
    """distinct select on columns"""
    distinct_on: [pile_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pile_user_order_by!]

    """filter the rows returned"""
    where: pile_user_bool_exp
  ): pile_user_aggregate!

  """fetch data from the table: "pile_user" using primary key columns"""
  pile_user_by_pk(id: uuid!): pile_user

  """
  fetch data from the table: "tag"
  """
  tag(
    """distinct select on columns"""
    distinct_on: [tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_order_by!]

    """filter the rows returned"""
    where: tag_bool_exp
  ): [tag!]!

  """
  fetch aggregated fields from the table: "tag"
  """
  tag_aggregate(
    """distinct select on columns"""
    distinct_on: [tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_order_by!]

    """filter the rows returned"""
    where: tag_bool_exp
  ): tag_aggregate!

  """fetch data from the table: "tag" using primary key columns"""
  tag_by_pk(id: uuid!): tag

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """
  fetch data from the table: "user_bookmark"
  """
  user_bookmark(
    """distinct select on columns"""
    distinct_on: [user_bookmark_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_bookmark_order_by!]

    """filter the rows returned"""
    where: user_bookmark_bool_exp
  ): [user_bookmark!]!

  """
  fetch aggregated fields from the table: "user_bookmark"
  """
  user_bookmark_aggregate(
    """distinct select on columns"""
    distinct_on: [user_bookmark_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_bookmark_order_by!]

    """filter the rows returned"""
    where: user_bookmark_bool_exp
  ): user_bookmark_aggregate!

  """fetch data from the table: "user_bookmark" using primary key columns"""
  user_bookmark_by_pk(id: uuid!): user_bookmark

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: uuid!): user
}

type subscription_root {
  """
  fetch data from the table: "bookmark"
  """
  bookmark(
    """distinct select on columns"""
    distinct_on: [bookmark_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmark_order_by!]

    """filter the rows returned"""
    where: bookmark_bool_exp
  ): [bookmark!]!

  """
  fetch aggregated fields from the table: "bookmark"
  """
  bookmark_aggregate(
    """distinct select on columns"""
    distinct_on: [bookmark_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmark_order_by!]

    """filter the rows returned"""
    where: bookmark_bool_exp
  ): bookmark_aggregate!

  """fetch data from the table: "bookmark" using primary key columns"""
  bookmark_by_pk(id: uuid!): bookmark

  """
  fetch data from the table: "bookmark_tag"
  """
  bookmark_tag(
    """distinct select on columns"""
    distinct_on: [bookmark_tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmark_tag_order_by!]

    """filter the rows returned"""
    where: bookmark_tag_bool_exp
  ): [bookmark_tag!]!

  """
  fetch aggregated fields from the table: "bookmark_tag"
  """
  bookmark_tag_aggregate(
    """distinct select on columns"""
    distinct_on: [bookmark_tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bookmark_tag_order_by!]

    """filter the rows returned"""
    where: bookmark_tag_bool_exp
  ): bookmark_tag_aggregate!

  """fetch data from the table: "bookmark_tag" using primary key columns"""
  bookmark_tag_by_pk(bookmark_id: uuid!, tag_id: uuid!): bookmark_tag

  """
  fetch data from the table: "identities"
  """
  identities(
    """distinct select on columns"""
    distinct_on: [identities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identities_order_by!]

    """filter the rows returned"""
    where: identities_bool_exp
  ): [identities!]!

  """
  fetch aggregated fields from the table: "identities"
  """
  identities_aggregate(
    """distinct select on columns"""
    distinct_on: [identities_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [identities_order_by!]

    """filter the rows returned"""
    where: identities_bool_exp
  ): identities_aggregate!

  """fetch data from the table: "identities" using primary key columns"""
  identities_by_pk(id: uuid!): identities

  """
  fetch data from the table: "pile"
  """
  pile(
    """distinct select on columns"""
    distinct_on: [pile_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pile_order_by!]

    """filter the rows returned"""
    where: pile_bool_exp
  ): [pile!]!

  """
  fetch aggregated fields from the table: "pile"
  """
  pile_aggregate(
    """distinct select on columns"""
    distinct_on: [pile_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pile_order_by!]

    """filter the rows returned"""
    where: pile_bool_exp
  ): pile_aggregate!

  """
  fetch data from the table: "pile_bookmark"
  """
  pile_bookmark(
    """distinct select on columns"""
    distinct_on: [pile_bookmark_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pile_bookmark_order_by!]

    """filter the rows returned"""
    where: pile_bookmark_bool_exp
  ): [pile_bookmark!]!

  """
  fetch aggregated fields from the table: "pile_bookmark"
  """
  pile_bookmark_aggregate(
    """distinct select on columns"""
    distinct_on: [pile_bookmark_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pile_bookmark_order_by!]

    """filter the rows returned"""
    where: pile_bookmark_bool_exp
  ): pile_bookmark_aggregate!

  """fetch data from the table: "pile_bookmark" using primary key columns"""
  pile_bookmark_by_pk(id: uuid!): pile_bookmark

  """fetch data from the table: "pile" using primary key columns"""
  pile_by_pk(id: uuid!): pile

  """
  fetch data from the table: "pile_consumer"
  """
  pile_consumer(
    """distinct select on columns"""
    distinct_on: [pile_consumer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pile_consumer_order_by!]

    """filter the rows returned"""
    where: pile_consumer_bool_exp
  ): [pile_consumer!]!

  """
  fetch aggregated fields from the table: "pile_consumer"
  """
  pile_consumer_aggregate(
    """distinct select on columns"""
    distinct_on: [pile_consumer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pile_consumer_order_by!]

    """filter the rows returned"""
    where: pile_consumer_bool_exp
  ): pile_consumer_aggregate!

  """fetch data from the table: "pile_consumer" using primary key columns"""
  pile_consumer_by_pk(id: uuid!): pile_consumer

  """
  fetch data from the table: "pile_user"
  """
  pile_user(
    """distinct select on columns"""
    distinct_on: [pile_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pile_user_order_by!]

    """filter the rows returned"""
    where: pile_user_bool_exp
  ): [pile_user!]!

  """
  fetch aggregated fields from the table: "pile_user"
  """
  pile_user_aggregate(
    """distinct select on columns"""
    distinct_on: [pile_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pile_user_order_by!]

    """filter the rows returned"""
    where: pile_user_bool_exp
  ): pile_user_aggregate!

  """fetch data from the table: "pile_user" using primary key columns"""
  pile_user_by_pk(id: uuid!): pile_user

  """
  fetch data from the table: "tag"
  """
  tag(
    """distinct select on columns"""
    distinct_on: [tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_order_by!]

    """filter the rows returned"""
    where: tag_bool_exp
  ): [tag!]!

  """
  fetch aggregated fields from the table: "tag"
  """
  tag_aggregate(
    """distinct select on columns"""
    distinct_on: [tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_order_by!]

    """filter the rows returned"""
    where: tag_bool_exp
  ): tag_aggregate!

  """fetch data from the table: "tag" using primary key columns"""
  tag_by_pk(id: uuid!): tag

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """
  fetch data from the table: "user_bookmark"
  """
  user_bookmark(
    """distinct select on columns"""
    distinct_on: [user_bookmark_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_bookmark_order_by!]

    """filter the rows returned"""
    where: user_bookmark_bool_exp
  ): [user_bookmark!]!

  """
  fetch aggregated fields from the table: "user_bookmark"
  """
  user_bookmark_aggregate(
    """distinct select on columns"""
    distinct_on: [user_bookmark_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_bookmark_order_by!]

    """filter the rows returned"""
    where: user_bookmark_bool_exp
  ): user_bookmark_aggregate!

  """fetch data from the table: "user_bookmark" using primary key columns"""
  user_bookmark_by_pk(id: uuid!): user_bookmark

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: uuid!): user
}

"""
columns and relationships of "tag"
"""
type tag {
  id: uuid!
  name: String!
}

"""
aggregated selection of "tag"
"""
type tag_aggregate {
  aggregate: tag_aggregate_fields
  nodes: [tag!]!
}

"""
aggregate fields of "tag"
"""
type tag_aggregate_fields {
  count(columns: [tag_select_column!], distinct: Boolean): Int!
  max: tag_max_fields
  min: tag_min_fields
}

"""
Boolean expression to filter rows from the table "tag". All fields are combined with a logical 'AND'.
"""
input tag_bool_exp {
  _and: [tag_bool_exp!]
  _not: tag_bool_exp
  _or: [tag_bool_exp!]
  id: uuid_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "tag"
"""
enum tag_constraint {
  """unique or primary key constraint"""
  tag_name_unique

  """unique or primary key constraint"""
  tag_pkey
}

"""
input type for inserting data into table "tag"
"""
input tag_insert_input {
  id: uuid
  name: String
}

"""aggregate max on columns"""
type tag_max_fields {
  id: uuid
  name: String
}

"""aggregate min on columns"""
type tag_min_fields {
  id: uuid
  name: String
}

"""
response of any mutation on the table "tag"
"""
type tag_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tag!]!
}

"""
on_conflict condition type for table "tag"
"""
input tag_on_conflict {
  constraint: tag_constraint!
  update_columns: [tag_update_column!]! = []
  where: tag_bool_exp
}

"""Ordering options when selecting data from "tag"."""
input tag_order_by {
  id: order_by
  name: order_by
}

"""primary key columns input for table: tag"""
input tag_pk_columns_input {
  id: uuid!
}

"""
select columns of table "tag"
"""
enum tag_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "tag"
"""
input tag_set_input {
  id: uuid
  name: String
}

"""
update columns of table "tag"
"""
enum tag_update_column {
  """column name"""
  id

  """column name"""
  name
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""Users for Sifty"""
type user {
  id: uuid!

  """An object relationship"""
  identity: identities!
  kratos_id: uuid!

  """An array relationship"""
  user_bookmarks(
    """distinct select on columns"""
    distinct_on: [user_bookmark_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_bookmark_order_by!]

    """filter the rows returned"""
    where: user_bookmark_bool_exp
  ): [user_bookmark!]!

  """An aggregate relationship"""
  user_bookmarks_aggregate(
    """distinct select on columns"""
    distinct_on: [user_bookmark_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_bookmark_order_by!]

    """filter the rows returned"""
    where: user_bookmark_bool_exp
  ): user_bookmark_aggregate!
}

"""
aggregated selection of "user"
"""
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

"""
aggregate fields of "user"
"""
type user_aggregate_fields {
  count(columns: [user_select_column!], distinct: Boolean): Int!
  max: user_max_fields
  min: user_min_fields
}

"""Bookmarks for a user"""
type user_bookmark {
  """An object relationship"""
  bookmark: bookmark!
  bookmark_id: uuid!
  id: uuid!
  name: String

  """An object relationship"""
  user: user!
  user_id: uuid!
}

"""
aggregated selection of "user_bookmark"
"""
type user_bookmark_aggregate {
  aggregate: user_bookmark_aggregate_fields
  nodes: [user_bookmark!]!
}

"""
aggregate fields of "user_bookmark"
"""
type user_bookmark_aggregate_fields {
  count(columns: [user_bookmark_select_column!], distinct: Boolean): Int!
  max: user_bookmark_max_fields
  min: user_bookmark_min_fields
}

"""
order by aggregate values of table "user_bookmark"
"""
input user_bookmark_aggregate_order_by {
  count: order_by
  max: user_bookmark_max_order_by
  min: user_bookmark_min_order_by
}

"""
input type for inserting array relation for remote table "user_bookmark"
"""
input user_bookmark_arr_rel_insert_input {
  data: [user_bookmark_insert_input!]!

  """upsert condition"""
  on_conflict: user_bookmark_on_conflict
}

"""
Boolean expression to filter rows from the table "user_bookmark". All fields are combined with a logical 'AND'.
"""
input user_bookmark_bool_exp {
  _and: [user_bookmark_bool_exp!]
  _not: user_bookmark_bool_exp
  _or: [user_bookmark_bool_exp!]
  bookmark: bookmark_bool_exp
  bookmark_id: uuid_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  user: user_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "user_bookmark"
"""
enum user_bookmark_constraint {
  """unique or primary key constraint"""
  user_bookmark_pkey
}

"""
input type for inserting data into table "user_bookmark"
"""
input user_bookmark_insert_input {
  bookmark: bookmark_obj_rel_insert_input
  bookmark_id: uuid
  id: uuid
  name: String
  user: user_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type user_bookmark_max_fields {
  bookmark_id: uuid
  id: uuid
  name: String
  user_id: uuid
}

"""
order by max() on columns of table "user_bookmark"
"""
input user_bookmark_max_order_by {
  bookmark_id: order_by
  id: order_by
  name: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type user_bookmark_min_fields {
  bookmark_id: uuid
  id: uuid
  name: String
  user_id: uuid
}

"""
order by min() on columns of table "user_bookmark"
"""
input user_bookmark_min_order_by {
  bookmark_id: order_by
  id: order_by
  name: order_by
  user_id: order_by
}

"""
response of any mutation on the table "user_bookmark"
"""
type user_bookmark_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user_bookmark!]!
}

"""
on_conflict condition type for table "user_bookmark"
"""
input user_bookmark_on_conflict {
  constraint: user_bookmark_constraint!
  update_columns: [user_bookmark_update_column!]! = []
  where: user_bookmark_bool_exp
}

"""Ordering options when selecting data from "user_bookmark"."""
input user_bookmark_order_by {
  bookmark: bookmark_order_by
  bookmark_id: order_by
  id: order_by
  name: order_by
  user: user_order_by
  user_id: order_by
}

"""primary key columns input for table: user_bookmark"""
input user_bookmark_pk_columns_input {
  id: uuid!
}

"""
select columns of table "user_bookmark"
"""
enum user_bookmark_select_column {
  """column name"""
  bookmark_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  user_id
}

"""
input type for updating data in table "user_bookmark"
"""
input user_bookmark_set_input {
  bookmark_id: uuid
  id: uuid
  name: String
  user_id: uuid
}

"""
update columns of table "user_bookmark"
"""
enum user_bookmark_update_column {
  """column name"""
  bookmark_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  user_id
}

"""
Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
"""
input user_bool_exp {
  _and: [user_bool_exp!]
  _not: user_bool_exp
  _or: [user_bool_exp!]
  id: uuid_comparison_exp
  identity: identities_bool_exp
  kratos_id: uuid_comparison_exp
  user_bookmarks: user_bookmark_bool_exp
}

"""
unique or primary key constraints on table "user"
"""
enum user_constraint {
  """unique or primary key constraint"""
  user_kratos_id_key

  """unique or primary key constraint"""
  user_pkey
}

"""
input type for inserting data into table "user"
"""
input user_insert_input {
  id: uuid
  identity: identities_obj_rel_insert_input
  kratos_id: uuid
  user_bookmarks: user_bookmark_arr_rel_insert_input
}

"""aggregate max on columns"""
type user_max_fields {
  id: uuid
  kratos_id: uuid
}

"""aggregate min on columns"""
type user_min_fields {
  id: uuid
  kratos_id: uuid
}

"""
response of any mutation on the table "user"
"""
type user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user!]!
}

"""
input type for inserting object relation for remote table "user"
"""
input user_obj_rel_insert_input {
  data: user_insert_input!

  """upsert condition"""
  on_conflict: user_on_conflict
}

"""
on_conflict condition type for table "user"
"""
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]! = []
  where: user_bool_exp
}

"""Ordering options when selecting data from "user"."""
input user_order_by {
  id: order_by
  identity: identities_order_by
  kratos_id: order_by
  user_bookmarks_aggregate: user_bookmark_aggregate_order_by
}

"""primary key columns input for table: user"""
input user_pk_columns_input {
  id: uuid!
}

"""
select columns of table "user"
"""
enum user_select_column {
  """column name"""
  id

  """column name"""
  kratos_id
}

"""
input type for updating data in table "user"
"""
input user_set_input {
  id: uuid
  kratos_id: uuid
}

"""
update columns of table "user"
"""
enum user_update_column {
  """column name"""
  id

  """column name"""
  kratos_id
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

