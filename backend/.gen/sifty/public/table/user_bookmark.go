//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserBookmark = newUserBookmarkTable("public", "user_bookmark", "")

type userBookmarkTable struct {
	postgres.Table

	//Columns
	ID         postgres.ColumnString
	UserID     postgres.ColumnString
	BookmarkID postgres.ColumnString
	Name       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserBookmarkTable struct {
	userBookmarkTable

	EXCLUDED userBookmarkTable
}

// AS creates new UserBookmarkTable with assigned alias
func (a UserBookmarkTable) AS(alias string) *UserBookmarkTable {
	return newUserBookmarkTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserBookmarkTable with assigned schema name
func (a UserBookmarkTable) FromSchema(schemaName string) *UserBookmarkTable {
	return newUserBookmarkTable(schemaName, a.TableName(), a.Alias())
}

func newUserBookmarkTable(schemaName, tableName, alias string) *UserBookmarkTable {
	return &UserBookmarkTable{
		userBookmarkTable: newUserBookmarkTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newUserBookmarkTableImpl("", "excluded", ""),
	}
}

func newUserBookmarkTableImpl(schemaName, tableName, alias string) userBookmarkTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		UserIDColumn     = postgres.StringColumn("user_id")
		BookmarkIDColumn = postgres.StringColumn("bookmark_id")
		NameColumn       = postgres.StringColumn("name")
		allColumns       = postgres.ColumnList{IDColumn, UserIDColumn, BookmarkIDColumn, NameColumn}
		mutableColumns   = postgres.ColumnList{UserIDColumn, BookmarkIDColumn, NameColumn}
	)

	return userBookmarkTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		UserID:     UserIDColumn,
		BookmarkID: BookmarkIDColumn,
		Name:       NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
