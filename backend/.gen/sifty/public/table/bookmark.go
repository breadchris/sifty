//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Bookmark = newBookmarkTable("public", "bookmark", "")

type bookmarkTable struct {
	postgres.Table

	//Columns
	ID       postgres.ColumnString
	URL      postgres.ColumnString
	Title    postgres.ColumnString
	Excerpt  postgres.ColumnString
	Author   postgres.ColumnString
	Public   postgres.ColumnBool
	Content  postgres.ColumnString
	HTML     postgres.ColumnString
	Modified postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type BookmarkTable struct {
	bookmarkTable

	EXCLUDED bookmarkTable
}

// AS creates new BookmarkTable with assigned alias
func (a BookmarkTable) AS(alias string) *BookmarkTable {
	return newBookmarkTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BookmarkTable with assigned schema name
func (a BookmarkTable) FromSchema(schemaName string) *BookmarkTable {
	return newBookmarkTable(schemaName, a.TableName(), a.Alias())
}

func newBookmarkTable(schemaName, tableName, alias string) *BookmarkTable {
	return &BookmarkTable{
		bookmarkTable: newBookmarkTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newBookmarkTableImpl("", "excluded", ""),
	}
}

func newBookmarkTableImpl(schemaName, tableName, alias string) bookmarkTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		URLColumn      = postgres.StringColumn("url")
		TitleColumn    = postgres.StringColumn("title")
		ExcerptColumn  = postgres.StringColumn("excerpt")
		AuthorColumn   = postgres.StringColumn("author")
		PublicColumn   = postgres.BoolColumn("public")
		ContentColumn  = postgres.StringColumn("content")
		HTMLColumn     = postgres.StringColumn("html")
		ModifiedColumn = postgres.TimestampColumn("modified")
		allColumns     = postgres.ColumnList{IDColumn, URLColumn, TitleColumn, ExcerptColumn, AuthorColumn, PublicColumn, ContentColumn, HTMLColumn, ModifiedColumn}
		mutableColumns = postgres.ColumnList{URLColumn, TitleColumn, ExcerptColumn, AuthorColumn, PublicColumn, ContentColumn, HTMLColumn, ModifiedColumn}
	)

	return bookmarkTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		URL:      URLColumn,
		Title:    TitleColumn,
		Excerpt:  ExcerptColumn,
		Author:   AuthorColumn,
		Public:   PublicColumn,
		Content:  ContentColumn,
		HTML:     HTMLColumn,
		Modified: ModifiedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
